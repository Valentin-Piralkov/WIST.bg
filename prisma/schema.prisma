// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitAPI"]
  seed            = "ts-node ./prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  firstName        String
  lastName         String
  slug             String            @unique
  email            String            @unique
  emailVerified    Boolean           @default(false)
  password         String
  phone            String            @unique
  occupation       String?
  linkedinProfile  String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  activationTokens ActivationToken[]
  resetTokens      ResetToken[]
  savedInternships Internship[]
}

model Company {
  id                      Int                      @id @default(autoincrement())
  name                    String                   @unique
  slug                    String                   @unique
  email                   String                   @unique
  emailVerified           Boolean                  @default(false)
  phone                   String                   @unique
  password                String
  description             String?
  logo                    String?
  website                 String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  internships             Internship[]
  companyResetTokens      CompanyResetToken[]
  companyActivationTokens CompanyActivationToken[]
}

model Section {
  id        Int      @id @default(autoincrement())
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SalaryRate {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  TOTAL
}

enum hoursRate {
  DAY
  WEEK
}

enum Type {
  REMOTE
  HYBRID
  ONSITE
}

model Internship {
  id          Int        @id @default(autoincrement())
  title       String
  slug        String     @unique
  description String
  location    String // city
  duration    Int // in months
  salary      Int // in BGN
  salaryRate  SalaryRate @default(MONTHLY)
  hours       Int // per Day or Week
  hoursRate   hoursRate  @default(DAY)
  deadline    DateTime
  type        Type       @default(ONSITE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int
  users       User[]
}

// for email verification (expiration 24h)
model ActivationToken {
  id           String    @id @default(uuid())
  token        String    @unique
  created_at   DateTime  @default(now())
  activated_at DateTime?

  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int
}

// for password reset (no expiration 24h)
model ResetToken {
  id           String    @id @default(uuid())
  token        String    @unique
  reset_code   String
  created_at   DateTime  @default(now())
  activated_at DateTime?

  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int
}

// for company email verification (expiration 24h)
model CompanyActivationToken {
  id           String    @id @default(uuid())
  token        String    @unique
  created_at   DateTime  @default(now())
  activated_at DateTime?

  company    Company @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id Int
}

// for company password reset (no expiration 24h)
model CompanyResetToken {
  id           String    @id @default(uuid())
  token        String    @unique
  reset_code   String
  created_at   DateTime  @default(now())
  activated_at DateTime?

  company    Company @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id Int
}

model Category {
  id        String         @id @default(cuid())
  label     String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  options   FilterOption[]
}

model FilterOption {
  id         String   @id @default(cuid())
  label      String   @unique
  value      Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
}
